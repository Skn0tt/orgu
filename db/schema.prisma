// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

// --------------------------------------

model User {
  id             Int      @id @default(autoincrement())
  authId         String   @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  name           String?
  hashedPassword String?
  role           String   @default("USER")

  tokens   Token[]
  sessions Session[]
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

enum TokenType {
  RESET_PASSWORD
}

model Token {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hashedToken String
  type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

model Question {
  id                Int                @id @default(autoincrement())
  title             String
  status            String
  personToQuestions PersonToQuestion[]
  answers           Answer[]
  tagToQuestions    TagToQuestion[]
}

model Person {
  id                Int                @id @default(autoincrement())
  name              String
  description       String
  personToQuestions PersonToQuestion[]
  answers           Answer[]
  tagToPersons      TagToPerson[]
}

model Answer {
  id          Int      @id @default(autoincrement())
  description String
  person      Person   @relation(fields: [personId], references: [id], onDelete: Cascade)
  personId    Int
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId  Int

  @@unique([personId, questionId])
}

model PersonToQuestion {
  id         Int      @id @default(autoincrement())
  person     Person   @relation(fields: [personId], references: [id], onDelete: Cascade)
  personId   Int
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId Int

  @@unique([personId, questionId])
}

model Tag {
  id             Int             @id @default(autoincrement())
  name           String
  parent         Tag?            @relation("TagToTag", fields: [parentId], references: [id])
  children       Tag[]           @relation("TagToTag")
  parentId       Int?
  tagToQuestions TagToQuestion[]
  tagToPersons   TagToPerson[]
}

model TagToQuestion {
  id         Int      @id @default(autoincrement())
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  questionId Int
  tagId      Int
  isLeaf     Boolean  @default(false)
}

model TagToPerson {
  id       Int     @id @default(autoincrement())
  person   Person  @relation(fields: [personId], references: [id], onDelete: Cascade)
  tag      Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)
  personId Int
  tagId    Int
  isLeaf   Boolean @default(false)
}
